// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('services').factory('LoginService', function($http, $q, $location, SecurityRetryQueue, $ionicPopup, $rootScope, $timeout) {
    var $scope, factoryObj, redirect;
    $scope = $rootScope.$new();
    SecurityRetryQueue.onItemAddedCallbacks.push(function(retryItem) {
      if (SecurityRetryQueue.hasMore()) {
        console.log("retry lefut");
        return factoryObj.showLoginDialog();
      }
    });
    $scope.loginDialog = void 0;
    $scope.registrationDialog = void 0;
    $scope.register = function() {
      console.log("register");
      if ($scope.loginDialog !== void 0) {
        $scope.loginDialog.close();
        $scope.loginDialog = void 0;
        return $timeout($scope.openRegistrationDialog, 1);
      }
    };
    $scope.login = function() {
      if ($scope.registrationDialog !== void 0) {
        $scope.registrationDialog.close();
        $scope.registrationDialog = void 0;
        return $timeout($scope.openLoginDialog, 1);
      }
    };
    $scope.openRegistrationDialog = function() {
      $scope.data = {};
      if ($scope.registrationDialog) {
        throw new Error('Trying to open a dialog that is already open!');
      }
      return $scope.registrationDialog = $ionicPopup.show({
        template: '<div class="list">\n  <label class="item item-input">\n    <input type="text" placeholder="Username" ng-model="data.userName">\n  </label>\n  <label class="item item-input">\n    <input type="email" placeholder="Email" ng-model="data.email">\n  </label>\n  <label class="item item-input">\n    <input type="password" placeholder="Password" ng-model="data.password">\n  </label>\n  <label class="item item-input">\n    <input type="password" placeholder="Repeat password" ng-model="data.passwordRepeat">\n  </label>\n  <a ng-click="login()">Already registered, take me to sign in</a>\n</div>',
        title: 'Please sign up',
        scope: $scope,
        buttons: [
          {
            text: 'Cancel'
          }, {
            text: '<b>Sign up</b>',
            type: 'button-positive',
            onTap: function(e) {
              var User, promise;
              if (($scope.data.password != null) && ($scope.data.userName != null)) {
                User = {
                  userName: $scope.data.userName,
                  password: $scope.data.password,
                  email: $scope.data.email
                };
                promise = factoryObj.signUp(User);
                return promise.then(function() {
                  $scope.registrationDialog.close();
                  $scope.registrationDialog = void 0;
                  return $scope.retryAuthentication();
                }, function() {
                  return console.log("regisztrációs hiba");
                });
              }
            }
          }
        ]
      });
    };
    $scope.openLoginDialog = function() {
      $scope.data = {};
      if ($scope.loginDialog) {
        throw new Error('Trying to open a dialog that is already open!');
      }
      $scope.loginDialog = $ionicPopup.show({
        template: '<div class="list">\n  <label class="item item-input">\n    <input type="text" placeholder="Username" ng-model="data.userName">\n  </label>\n  <label class="item item-input">\n    <input type="password" placeholder="Password" ng-model="data.password">\n  </label>\n  <a ng-click="register()">Not registered, take me to sign up</a>\n</div>',
        title: 'Please sign in',
        scope: $scope,
        buttons: [
          {
            text: 'Cancel'
          }, {
            text: '<b>Save</b>',
            type: 'button-positive',
            onTap: function(e) {
              var promise;
              e.preventDefault();
              if (($scope.data.password != null) && ($scope.data.userName != null)) {
                promise = factoryObj.login($scope.data.userName, $scope.data.password);
                return promise.then(function() {
                  $scope.loginDialog.close();
                  $scope.loginDialog = void 0;
                  return $scope.retryAuthentication();
                }, function() {
                  return console.log("bejelentkezési hiba");
                });
              }
            }
          }
        ]
      });
      $scope.retryAuthentication = function() {
        return SecurityRetryQueue.retryAll();
      };
      return $scope.cancelAuthentication = function() {
        SecurityRetryQueue.cancelAll();
        return redirect();
      };
    };
    redirect = function(url) {
      url = url || '/';
      return $location.path(url);
    };
    factoryObj = {
      login: function(userName, password) {
        var deferred, handleResult;
        handleResult = function(result) {
          if (typeof result.data.then === "function") {
            return result.data.then(function(data) {
              sessionStorage.setItem("userName", data.userName);
              return data;
            });
          } else {
            return data;
          }
        };
        return $http.post('login', {
          userName: userName,
          password: password
        }).then(handleResult);
        return deferred = $q.defer();
      },
      signUp: function(User) {
        var deferred, handleResult;
        handleResult = function(result) {
          if (typeof result.data.then === "function") {
            return result.data.then(function(data) {
              sessionStorage.setItem("userName", data.userName);
              return data;
            });
          } else {
            return data;
          }
        };
        return $http.post('signUp', User).then(handleResult);
        return deferred = $q.defer();
      },
      showLoginDialog: function() {
        return $scope.openLoginDialog();
      },
      addUser: function(User) {
        var handleResult;
        handleResult = function(result) {
          if (typeof result.data.then === "function") {
            return result.data.then(function(data) {
              return data;
            });
          } else {
            return data;
          }
        };
        return $http.post('users/new', User).then(handleResult);
      },
      removeUser: function(User) {
        var handleResult;
        handleResult = function(result) {
          if (typeof result.data.then === "function") {
            return result.data.then(function(data) {
              return data;
            });
          } else {
            return data;
          }
        };
        return $http["delete"]("users", {
          id: User.id
        }).then(handleResult);
      },
      getSignedInUser: function() {
        var defer, promise, userName;
        userName = sessionStorage.getItem("userName");
        defer = $q.defer();
        if (userName) {
          return userName;
        } else {
          promise = SecurityRetryQueue.pushRetryFn('unauthorized-server', factoryObj.getSignedInUser);
          return promise;
        }
      }
    };
    return factoryObj;
  });

}).call(this);
