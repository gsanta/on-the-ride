// Generated by CoffeeScript 1.7.1
(function() {
  angular.module('starter').config(function($provide) {
    return $provide.decorator('$httpBackend', angular.mock.e2e.$httpBackendDecorator);
  }).run(function($httpBackend, LocalDataProviderService, LoginService, $q) {
    $httpBackend.whenPOST('users/new').respond(function(method, url, data) {
      var promise;
      promise = LocalDataProviderService.addUser(data);
      return [401, promise, {}];
    });
    $httpBackend.whenDELETE('users').respond(function(method, url, data) {
      return console.log("deleting");
    });
    $httpBackend.whenPOST('login').respond(function(method, url, data) {
      var obj, promise;
      obj = angular.fromJson(data);
      promise = LocalDataProviderService.getUser(obj.userName, obj.password);
      return [200, promise, {}];
    });
    $httpBackend.whenPOST('signUp').respond(function(method, url, data) {
      var obj, promise;
      obj = angular.fromJson(data);
      promise = LocalDataProviderService.addUser(obj);
      return [200, promise, {}];
    });
    $httpBackend.whenGET(/users\/.*/).respond(function(method, url, data) {
      var promise, userName, userNameIndex;
      userNameIndex = url.lastIndexOf("/");
      userName = url.substring(userNameIndex + 1);
      promise = LocalDataProviderService.getUser(userName);
      return [200, promise, {}];
    });
    $httpBackend.whenPUT(/users\/.*/).respond(function(method, url, data) {
      var obj, promise, userName, userNameIndex;
      userNameIndex = url.lastIndexOf("/");
      userName = url.substring(userNameIndex + 1);
      obj = angular.fromJson(data);
      promise = LocalDataProviderService.updateUser(userName, obj);
      return [200, promise, {}];
    });
    $httpBackend.whenPUT('changePassword').respond(function(method, url, data) {
      var newObj, obj, promise;
      obj = angular.fromJson(data);
      newObj = {
        password: obj.newPassword
      };
      promise = LocalDataProviderService.updateUser(obj.userName, newObj);
      return [200, promise, {}];
    });
    $httpBackend.whenGET(/vote\/.*/).respond(function(method, url, data) {
      var mapId, mapIdIndex, userName, userNameIndex;
      userNameIndex = url.indexOf("/", 1);
      mapIdIndex = url.lastIndexOf("/");
      userName = url.substring(userNameIndex + 1, mapIdIndex);
      mapId = url.substring(mapIdIndex + 1);
      return [200, 1, {}];
    });
    return $httpBackend.whenGET(/templates\/.*/).passThrough();
  });

}).call(this);
