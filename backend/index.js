// Generated by CoffeeScript 1.7.1
(function() {
  var CollectionDriver, MongoClient, Server, app, collectionDriver, express, http, mongoHost, mongoPort, mongodb, mongodbHelper, path, util;

  http = require("http");

  express = require("express");

  path = require("path");

  mongodb = require("mongodb");

  mongodbHelper = require("./js/service/db/collectionDriverService");

  util = require('util');

  MongoClient = mongodb.MongoClient;

  Server = mongodb.Server;

  CollectionDriver = mongodbHelper.CollectionDriver;

  app = express();

  app.set('port', process.env.PORT || 3000);

  mongoHost = 'localHost';

  mongoPort = 27017;

  collectionDriver = null;

  mongodb.MongoClient.connect("mongodb://localhost:27017", function(err, mongoClient) {
    var db;
    if (!mongoClient) {
      console.error("Error! Exiting... Must start MongoDB first");
      process.exit(1);
    }
    db = mongoClient.db("on_the_ride");
    collectionDriver = new mongodbHelper.CollectionDriver(db);
  });

  app.set('view engine', 'ejs');

  app.engine('html', require('ejs').renderFile);

  app.use(express.bodyParser());

  app.use(express["static"](path.join(__dirname, "../www")));

  app.post("/:collection", function(req, res) {
    var collection, object;
    object = req.body;
    collection = req.params.collection;
    return collectionDriver.save(collection, object, function(err, docs) {
      if (err) {
        return res.send(400, err);
      } else {
        return res.send(201, docs);
      }
    });
  });

  app.get("/", function(req, res) {
    var params;
    params = req.params;
    return res.sendfile('../www/index.html');
  });

  app.get("/:collection", function(req, res) {
    var params;
    params = req.params;
    return collectionDriver.findAll(req.params.collection, function(error, objs) {
      if (error) {
        return res.send(400, error);
      } else {
        res.set("Content-Type", "application/json");
        return res.send(200, objs);
      }
    });
  });

  app.get("/route/:routeName/:zoom/:maps", function(req, res) {
    var index, map, maps, params, query, routeName, zoom, _i, _len;
    console.log("ez fut le");
    params = req.params;
    routeName = params.routeName;
    zoom = parseInt(params.zoom);
    maps = params.maps.split(",");
    for (index = _i = 0, _len = maps.length; _i < _len; index = ++_i) {
      map = maps[index];
      maps[index] = parseInt(map);
    }
    query = {
      weight: {
        $lte: zoom
      },
      mapIds: {
        $in: maps
      }
    };
    if ((routeName != null) && (zoom != null)) {
      return collectionDriver.query(routeName, query, function(error, objs) {
        if (error) {
          return res.send(400, error);
        } else {
          return res.send(200, objs);
        }
      });
    } else {
      return res.send(400, {
        error: 'bad url',
        url: req.url
      });
    }
  });

  app.get("/:collection/:entity", function(req, res) {
    var collection, entity, params;
    params = req.params;
    entity = params.entity;
    collection = params.collection;
    if (entity) {
      return collectionDriver.get(collection, entity, function(error, objs) {
        if (error) {
          return res.send(400, error);
        } else {
          return res.send(200, objs);
        }
      });
    } else {
      return res.send(400, {
        error: 'bad url',
        url: req.url
      });
    }
  });

  app.put("/:collection/:entity", function(req, res) {
    var collection, entity, error, params;
    params = req.params;
    entity = params.entity;
    collection = params.collection;
    if (entity) {
      return collectionDriver.update(collection, req.body, entity, function(error, objs) {
        if (error) {
          return res.send(400, error);
        } else {
          return res.send(200, objs);
        }
      });
    } else {
      error = {
        "message": "Cannot PUT a whole collection"
      };
      return res.send(400, error);
    }
  });

  app.del("/:collection/:entity", function(req, res) {
    var collection, entity, error, params;
    params = req.params;
    entity = params.entity;
    collection = params.collection;
    if (entity) {
      return collectionDriver["delete"](collection, entity, function(error, objs) {
        if (error) {
          return res.send(400, error);
        } else {
          return res.send(200, objs);
        }
      });
    } else {
      error = {
        "message": "Cannot DELETE a whole collection"
      };
      return res.send(400, error);
    }
  });

  http.createServer(app).listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

}).call(this);
